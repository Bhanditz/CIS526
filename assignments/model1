#!/usr/bin/env python
import optparse
import sys
import operator

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-s", "--num_iter", dest="num_iter", default=10, type="int", help="Number of iterations of EM")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Reading bitext...\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

count = dict() #partial count of english word aligned to french word
total = dict() #total count of french words
t = dict() #translation probabilities of english word given french word
sys.stderr.write("Itializing counts...\n")
for F,E in bitext : 
	for f in F : total[f] = 0.0

vf = len(total) #size of French vocabulary
for F,E in bitext : 
	for f in F : 
		for e in E : 
			if e not in count : count[e] = {}; t[e] = {}
			count[e][f] = 0.0; t[e][f] = 1.0 / vf

sys.stderr.write("Size of French : %d\n"%vf)
sys.stderr.write("Size of English: %d\n"%len(count))
sys.stderr.write("Initializing translation probabilities...\n")

i = 0 
for i in range(opts.num_iter) : 
	sys.stderr.write("EM iteration %d...\n"%i)
	#E step
	for f in total : total[f] = 0.0
	for e in count : 
		for f in count[e]: 
			count[e][f] = 0.0
	stotal = dict()
	for (n, (F, E)) in enumerate(bitext):
		for e in E : 
			stotal[e] = 0.0
			for f in F : 
				stotal[e] += t[e][f]
		for e in E :
			for f in F : 
				count[e][f] += t[e][f] / stotal[e]
				total[f] += t[e][f] / stotal[e]
	#M step
	for e in count : 
		for f in count[e] : t[e][f] = count[e][f] / total[f]

#Estimate most probable alignments
for (f, e) in bitext:
	for (i, f_i) in enumerate(f): 
		ai = [(j,t[e_j][f_i]) for (j, e_j) in enumerate(e)]
		j, te_j = sorted(ai, key=operator.itemgetter(1), reverse=True)[0]
        	sys.stdout.write("%i-%i " % (i,j))
	sys.stdout.write("\n")
