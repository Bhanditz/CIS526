#!/usr/bin/env python
import optparse
import sys
from collections import namedtuple
from itertools import combinations
from nltk.util import ngrams

optparser = optparse.OptionParser()
optparser.add_option("-n", "--nbest", dest="nbest", default="data/test.nbest.shuffled", help="N-best file")
optparser.add_option("-w", "--weight-file", dest="weights", default=None, help="Weight filename, or - for stdin (default=use uniform weights)")
optparser.add_option("-p", "--pos-tags", dest="pos", default='data/pos-tags.txt', help="parallel file containing parses")
(opts, _) = optparser.parse_args()

pos = [l.strip().split() for l in open(opts.pos).readlines()]
all_tags = [ 'CC', 'CD', 'DT', 'EX', 'FW', 'IN', 'JJ', 'JJR', 'JJS', 'LS', 'MD', 'NN', 'NNS', 'NNP', 'NNPS', 'PDT', 'POS', 'PRP', 'PRP$', 'RB', 'RBR', 'RBS', 'RP', 'SYM', 'TO', 'UH', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ', 'WDT', 'WP', 'WP$', 'WRB']

w = None
if opts.weights is not None:
  weights_file = sys.stdin if opts.weights is "-" else open(opts.weights)
  w = [float(line.strip()) for line in weights_file]

translation = namedtuple("translation", "english, score")
nbests = []
for n,line in enumerate(open(opts.nbest)):
  (i, sentence, features) = line.strip().split("|||")
  if len(nbests) <= int(i):
    nbests.append([])
  features = [float(h) for h in features.strip().split()]
  #unicode features
  try : sentence.encode('ascii'); features.append(0)
  except UnicodeDecodeError : features.append(1)
  #pos features
  tags = [t[0] for t in pos[n]]
  for t in ['N', 'V', 'P', 'J'] : features.append(tags.count(t))
  try : features.append(tags.count('N') / float(tags.count('V')))
  except ZeroDivisionError : features.append(0)
  tags = [t for t in pos[n]]
  for t in all_tags : features.append(tags.count(t))
  posngrams = ngrams(tags, 2)
  for seq in combinations(all_tags, 2) : features.append(posngrams.count(seq))

  if w is None:
    w = [1.0/len(features) for _ in xrange(len(features))]
  nbests[int(i)].append(translation(sentence.strip(), sum([x*y for x,y in zip(w, features)])))

for nbest in nbests:
  print sorted(nbest, key=lambda x: -x.score)[0].english
