#!/usr/bin/env python
import optparse
import sys
import models
import math
import pdb
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-m", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=10, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-r", "--reorder", dest="reorder", default=5, type="int", help="reordering limits")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.1, type="float", help="reordering limits")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

def extract_english(h): 
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

def bitmap(sequence):
  """ Generate a coverage bitmap for a sequence of indexes """
  return reduce(lambda x,y: x|y, map(lambda i: long('1'+'0'*i,2), sequence), 0)

def bitmap2str(b, n, on='o', off='.'):
  """ Generate a length-n string representation of bitmap b """
  return '' if n==0 else (on if b&1==1 else off) + bitmap2str(b>>1, n-1, on, off)

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]


# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
     tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french: 

  translation_options = {}
  for i in range(len(f)+1):
    for j in range(i+1,len(f)+1): 
      if f[i:j] in tm : 
        for phrase in tm[f[i:j]]: 
          if (i,j) not in translation_options: translation_options[(i,j)] = set()
	  translation_options[(i,j)].add(phrase)	      

  hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, btmp, endpos")
  initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, bitmap([]), 0)
  stacks = [{} for _ in f] + [{}]
  stacks[0][(bitmap([]),lm.begin(),0)] = initial_hypothesis

  for d in range(max(1,opts.reorder+1)):
    for i, stack in enumerate(stacks[:-1]):
         hyps = sorted(stack.itervalues(),key=lambda h: -h.logprob)
         for h in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
          for ti,tj in translation_options : 
            l = tj - ti + i
            for phrase in translation_options[(ti,tj)]:
              tbtmp = bitmap(range(ti,tj))
	      if opts.reorder > 0 : use = (abs(h.endpos - ti) <= d and (h.btmp & tbtmp == 0))
	      elif opts.reorder < 0 : use = ((h.btmp & tbtmp == 0)) 
	      if use :
                logprob = h.logprob + phrase.logprob
                lm_state = h.lm_state
                for word in phrase.english.split():
                  (lm_state, word_logprob) = lm.score(lm_state, word)
                  logprob += word_logprob
                logprob += lm.end(lm_state) if l == len(f) else 0.0
                b = h.btmp | tbtmp
                new_hypothesis = hypothesis(logprob, lm_state, h, phrase, h.btmp | tbtmp, tj)
                #recombine if agree on i) french covered so far ii) last two english words and iii) end of the last foriegn phrase
                if (b,lm_state,tj) not in stacks[l] or stacks[l][(b,lm_state,tj)].logprob < logprob: # last case is recombination
                  stacks[l][(b,lm_state,tj)] = new_hypothesis

  winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
  print extract_english(winner)

  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
      (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
